{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bogon\\\\CSE498\\\\ally-offers-ecosystem\\\\frontend\\\\src\\\\components\\\\EmbeddedMap.js\",\n  _s = $RefreshSig$();\nimport { memo, useEffect, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EmbeddedMap = () => {\n  _s();\n  const [initialized, setInitialized] = useState(false);\n  const [center, setCenter] = useState(null);\n  const [businesses, setBusinesses] = useState(null);\n  const [markers, setMarkers] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  useEffect(() => {\n    // Set latitude and longitude for map when this component mounts\n    navigator.geolocation.getCurrentPosition(position => {\n      setCenter({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    });\n\n    // Get a list of mappable businesses including their name, id, and latLong\n    if (!businesses) {\n      setMappableBusinesses();\n    }\n    if (businesses && !markers) {\n      setMarkerData();\n    }\n    if (businesses && markers) {\n      // Everything is initialized so we are good to display the map\n      setInitialized(true);\n    }\n  }, [businesses, markers]);\n\n  // Set a list of businesses whose coordinates we have\n  const setMappableBusinesses = async () => {\n    const response = await axios.get(\"http://localhost:8080/CustomerUsers/BusinessLocations\").catch(error => {\n      if (error.response) {\n        console.log('Server responded with status code:', error.response.status);\n        console.log('Response data:', error.response.data);\n      } else if (error.request) {\n        console.log('No response received:', error.request);\n      } else {\n        console.log('Error creating request:', error.message);\n      }\n    });\n    setBusinesses(await response.data);\n  };\n\n  // Set a list of Markers with the names and locations of each business\n  const setMarkerData = () => {\n    const markers = [];\n    if (businesses) {\n      businesses.forEach(business => {\n        const marker = {\n          name: business.name,\n          position: {\n            lat: business.latLong[0],\n            lng: business.latLong[1]\n          }\n        };\n        markers.push(marker);\n      });\n    }\n    setMarkers(markers);\n  };\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyCoJ2dosqQree0ARyQ5Isa9XPUt_6CcoRg\"\n  });\n  const containerStyle = {\n    width: '100%',\n    height: '100%'\n  };\n  return isLoaded && initialized ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 15,\n    clickableIcons: false,\n    children: [markers.map(marker => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: marker.position,\n        onClick: () => {\n          setSelectedMarker(marker);\n        }\n      }, marker.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this);\n    }), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n      position: selectedMarker.position,\n      options: {\n        pixelOffset: new window.google.maps.Size(0, -40)\n      },\n      onCloseClick: () => {\n        setSelectedMarker(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedMarker.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(EmbeddedMap, \"jPXq3FZr2MuYn210IaLtXhALOg4=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = EmbeddedMap;\nexport default _c2 = /*#__PURE__*/memo(EmbeddedMap);\nvar _c, _c2;\n$RefreshReg$(_c, \"EmbeddedMap\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["memo","useEffect","useState","GoogleMap","InfoWindow","Marker","useJsApiLoader","axios","EmbeddedMap","initialized","setInitialized","center","setCenter","businesses","setBusinesses","markers","setMarkers","selectedMarker","setSelectedMarker","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","setMappableBusinesses","setMarkerData","response","get","catch","error","console","log","status","data","request","message","forEach","business","marker","name","latLong","push","isLoaded","id","googleMapsApiKey","containerStyle","width","height","map","pixelOffset","window","google","maps","Size"],"sources":["C:/Users/bogon/CSE498/ally-offers-ecosystem/frontend/src/components/EmbeddedMap.js"],"sourcesContent":["import { memo, useEffect, useState } from 'react';\r\nimport { GoogleMap, InfoWindow, Marker, useJsApiLoader } from '@react-google-maps/api';\r\nimport axios from 'axios';\r\n\r\nconst EmbeddedMap = () => {\r\n\tconst [initialized, setInitialized] = useState(false);\r\n\tconst [center, setCenter] = useState(null);\r\n\tconst [businesses, setBusinesses] = useState(null);\r\n\tconst [markers, setMarkers] = useState(null);\r\n\tconst [selectedMarker, setSelectedMarker] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Set latitude and longitude for map when this component mounts\r\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\r\n\t\t\tsetCenter({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n\t\t});\r\n\r\n\t\t// Get a list of mappable businesses including their name, id, and latLong\r\n\t\tif (!businesses) {\r\n\t\t\tsetMappableBusinesses();\r\n\t\t}\r\n\r\n\t\tif (businesses && !markers) {\r\n\t\t\tsetMarkerData();\r\n\t\t}\r\n\r\n\t\tif (businesses && markers) {\r\n\t\t\t// Everything is initialized so we are good to display the map\r\n\t\t\tsetInitialized(true);\r\n\t\t}\r\n\t}, [businesses, markers]);\r\n\r\n\t// Set a list of businesses whose coordinates we have\r\n\tconst setMappableBusinesses = async () => {\r\n\t\tconst response = await axios.get(\"http://localhost:8080/CustomerUsers/BusinessLocations\")\r\n\t\t.catch((error) => {\r\n\t\t\tif (error.response) {\r\n\t\t\t\tconsole.log('Server responded with status code:', error.response.status);\r\n\t\t\t\tconsole.log('Response data:', error.response.data);\r\n\t\t\t} else if (error.request) {\r\n\t\t\t\tconsole.log('No response received:', error.request);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Error creating request:', error.message);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetBusinesses(await response.data);\r\n\t};\r\n\r\n\t// Set a list of Markers with the names and locations of each business\r\n\tconst setMarkerData = () => {\r\n\t\tconst markers = [];\r\n\t\tif (businesses) {\r\n\t\t\tbusinesses.forEach((business) => {\r\n\t\t\t\tconst marker = {\r\n\t\t\t\t\tname: business.name,\r\n\t\t\t\t\tposition: {lat: business.latLong[0], lng: business.latLong[1]},\r\n\t\t\t\t};\r\n\t\t\t\tmarkers.push(marker);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsetMarkers(markers);\r\n\t};\r\n\t\r\n\tconst { isLoaded } = useJsApiLoader({\r\n\t\tid: 'google-map-script',\r\n\t\tgoogleMapsApiKey: \"AIzaSyCoJ2dosqQree0ARyQ5Isa9XPUt_6CcoRg\",\r\n\t});\r\n\r\n\tconst containerStyle = {\r\n\t\twidth: '100%',\r\n\t\theight: '100%',\r\n\t};\r\n\r\n\treturn (\r\n\t\tisLoaded && initialized ? (\r\n\t\t\t<GoogleMap\r\n\t\t\t\tmapContainerStyle={containerStyle}\r\n\t\t\t\tcenter={center}\r\n\t\t\t\tzoom={15}\r\n\t\t\t\tclickableIcons={false}\r\n\t\t\t>\r\n\t\t\t\t{markers.map((marker) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\tkey={marker.name}\r\n\t\t\t\t\t\t\tposition={marker.position}\r\n\t\t\t\t\t\t\tonClick={() => {setSelectedMarker(marker)}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t\t{selectedMarker && (\r\n\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\tposition={selectedMarker.position}\r\n\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\tpixelOffset: new window.google.maps.Size(0, -40),\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonCloseClick={() => {setSelectedMarker(null)}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h1>{selectedMarker.name}</h1>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t)}\r\n\t\t\t</GoogleMap>\r\n\t\t) : <></>\r\n\t);\r\n};\r\n\r\nexport default memo(EmbeddedMap);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}