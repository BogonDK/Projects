{"ast":null,"code":"import axios from 'axios';\n\n// Get dashbaord info\nexport const getDashboard = async businessId => {\n  const data = {\n    id: businessId\n  };\n  const response = await axios.post(\"http://localhost:8080/BusinessUsers/DashboardInfo/\", data, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }).catch(error => {\n    if (error.response) {\n      console.log('Server responded with status code:', error.response.status);\n      console.log('Response data:', error.response.data);\n    } else if (error.request) {\n      console.log('No response received:', error.request);\n    } else {\n      console.log('Error creating request:', error.message);\n    }\n  });\n  const dashboardData = JSON.stringify(await response.data);\n  return dashboardData;\n};\n\n// Get dashbaord info\nexport const getTable = async businessId => {\n  const data = {\n    id: businessId\n  };\n  const response = await axios.post(\"http://localhost:8080/BusinessUsers/Analytics/\", data, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }).catch(error => {\n    if (error.response) {\n      console.log('Server responded with status code:', error.response.status);\n      console.log('Response data:', error.response.data);\n    } else if (error.request) {\n      console.log('No response received:', error.request);\n    } else {\n      console.log('Error creating request:', error.message);\n    }\n  });\n  const tableData = JSON.stringify(await response.data);\n\n  //console.log('Response data:', dashboardData)\n  return tableData;\n};","map":{"version":3,"names":["axios","getDashboard","businessId","data","id","response","post","headers","catch","error","console","log","status","request","message","dashboardData","JSON","stringify","getTable","tableData"],"sources":["C:/Users/bogon/CSE498/ally-offers-ecosystem/frontend/src/actions/businessDasboardAction.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get dashbaord info\r\nexport const getDashboard = async (businessId) => {\r\n\r\n    const data = {\r\n        id: businessId,\r\n    };\r\n    const response = await axios.post(\r\n        \"http://localhost:8080/BusinessUsers/DashboardInfo/\",\r\n        data,\r\n        {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n        },\r\n    )\r\n    .catch((error) => {\r\n        if (error.response) {\r\n            console.log('Server responded with status code:', error.response.status);\r\n            console.log('Response data:', error.response.data);\r\n        } else if (error.request) {\r\n            console.log('No response received:', error.request);\r\n        } else {\r\n            console.log('Error creating request:', error.message);\r\n        }\r\n    });\r\n    \r\n    const dashboardData = JSON.stringify(await response.data);\r\n\r\n    \r\n    return dashboardData\r\n    \r\n};\r\n\r\n\r\n// Get dashbaord info\r\nexport const getTable = async (businessId) => {\r\n\r\n    const data = {\r\n        id: businessId,\r\n    };\r\n    const response = await axios.post(\r\n        \"http://localhost:8080/BusinessUsers/Analytics/\",\r\n        data,\r\n        {\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n        },\r\n    )\r\n    .catch((error) => {\r\n        if (error.response) {\r\n            console.log('Server responded with status code:', error.response.status);\r\n            console.log('Response data:', error.response.data);\r\n        } else if (error.request) {\r\n            console.log('No response received:', error.request);\r\n        } else {\r\n            console.log('Error creating request:', error.message);\r\n        }\r\n    });\r\n    \r\n    const tableData = JSON.stringify(await response.data);\r\n\r\n    //console.log('Response data:', dashboardData)\r\n    return tableData\r\n    \r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,UAAU,IAAK;EAE9C,MAAMC,IAAI,GAAG;IACTC,EAAE,EAAEF;EACR,CAAC;EACD,MAAMG,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC7B,oDAAoD,EACpDH,IAAI,EACJ;IACII,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CACJ,CACAC,KAAK,CAAEC,KAAK,IAAK;IACd,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAChBK,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,KAAK,CAACJ,QAAQ,CAACO,MAAM,CAAC;MACxEF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAACJ,QAAQ,CAACF,IAAI,CAAC;IACtD,CAAC,MAAM,IAAIM,KAAK,CAACI,OAAO,EAAE;MACtBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,KAAK,CAACI,OAAO,CAAC;IACvD,CAAC,MAAM;MACHH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACK,OAAO,CAAC;IACzD;EACJ,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAAC,MAAMZ,QAAQ,CAACF,IAAI,CAAC;EAGzD,OAAOY,aAAa;AAExB,CAAC;;AAGD;AACA,OAAO,MAAMG,QAAQ,GAAG,MAAOhB,UAAU,IAAK;EAE1C,MAAMC,IAAI,GAAG;IACTC,EAAE,EAAEF;EACR,CAAC;EACD,MAAMG,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAC7B,gDAAgD,EAChDH,IAAI,EACJ;IACII,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CACJ,CACAC,KAAK,CAAEC,KAAK,IAAK;IACd,IAAIA,KAAK,CAACJ,QAAQ,EAAE;MAChBK,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,KAAK,CAACJ,QAAQ,CAACO,MAAM,CAAC;MACxEF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAACJ,QAAQ,CAACF,IAAI,CAAC;IACtD,CAAC,MAAM,IAAIM,KAAK,CAACI,OAAO,EAAE;MACtBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,KAAK,CAACI,OAAO,CAAC;IACvD,CAAC,MAAM;MACHH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACK,OAAO,CAAC;IACzD;EACJ,CAAC,CAAC;EAEF,MAAMK,SAAS,GAAGH,IAAI,CAACC,SAAS,CAAC,MAAMZ,QAAQ,CAACF,IAAI,CAAC;;EAErD;EACA,OAAOgB,SAAS;AAEpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}