{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bogon\\\\CSE498\\\\ally-offers-ecosystem\\\\frontend\\\\src\\\\components\\\\EmbeddedMap.js\",\n  _s = $RefreshSig$();\nimport { memo, useEffect, useState } from 'react';\nimport { GoogleMap, InfoWindow, Marker, useJsApiLoader } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EmbeddedMap = _ref => {\n  _s();\n  let {\n    navigate,\n    filters\n  } = _ref;\n  const [initialized, setInitialized] = useState(false);\n  const [userLocation, setUserLocation] = useState(null);\n  const [businesses, setBusinesses] = useState(null);\n  const [businessOffers, setBusinessOffers] = useState(null);\n  const [markers, setMarkers] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyCoJ2dosqQree0ARyQ5Isa9XPUt_6CcoRg\"\n  });\n\n  // Whenever filters change, update the markers\n  useEffect(() => {\n    // Only run if we have initialized\n    if (!initialized) {\n      return;\n    }\n    if (filters.length === 0) {\n      // Show all businesses when no filters are set\n      setMarkerData(businesses);\n    } else {\n      // When filters are set, show only filtered businesses\n      const filteredBusinesses = [];\n      businesses.forEach(business => {\n        if (filters.includes(business.category)) {\n          filteredBusinesses.push(business);\n        }\n      });\n      setMarkerData(filteredBusinesses);\n    }\n  }, [filters]);\n  useEffect(() => {\n    // Set latitude and longitude of user when this component mounts\n    navigator.geolocation.getCurrentPosition(position => {\n      setUserLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    });\n\n    // Get a list of mappable businesses including their name, id, and latLong\n    if (!businesses) {\n      setMappableBusinesses();\n    }\n    if (businesses && !businessOffers) {\n      setOffersByBusiness(businesses);\n    }\n    if (businesses && !markers) {\n      setMarkerData(businesses);\n    }\n    if (isLoaded && businesses && markers && businessOffers) {\n      // Everything is initialized so we are good to display the map\n      setInitialized(true);\n    }\n  }, [businesses, markers, isLoaded]);\n\n  // Set a list of businesses whose coordinates we have\n  const setMappableBusinesses = async () => {\n    const response = await axios.get(\"http://localhost:8080/CustomerUsers/BusinessLocations\").catch(error => {\n      if (error.response) {\n        console.log('Server responded with status code:', error.response.status);\n        console.log('Response data:', error.response.data);\n      } else if (error.request) {\n        console.log('No response received:', error.request);\n      } else {\n        console.log('Error creating request:', error.message);\n      }\n    });\n    setBusinesses(await response.data);\n  };\n\n  // Set an object containing all the offers of each business\n  const setOffersByBusiness = businesses => {\n    const offers = {};\n    businesses.forEach(async business => {\n      const data = {\n        id: business.id\n      };\n      const response = await axios.post(\"http://localhost:8080/BusinessUsers/Analytics\", data, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).catch(error => {\n        if (error.response) {\n          console.log('Server responded with status code:', error.response.status);\n          console.log('Response data:', error.response.data);\n        } else if (error.request) {\n          console.log('No response received:', error.request);\n        } else {\n          console.log('Error creating request:', error.message);\n        }\n      });\n      offers[business.id] = await response.data;\n    });\n    setBusinessOffers(offers);\n  };\n\n  // Set a list of Markers with the names and locations of each business\n  const setMarkerData = businesses => {\n    const markers = [];\n    businesses.forEach(business => {\n      const marker = {\n        id: business.id,\n        name: business.name,\n        position: {\n          lat: business.latLong[0],\n          lng: business.latLong[1]\n        }\n      };\n      markers.push(marker);\n    });\n    setMarkers(markers);\n  };\n  return initialized ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: {\n      width: '100%',\n      height: '100%'\n    },\n    center: userLocation,\n    zoom: 15,\n    clickableIcons: false,\n    options: {\n      styles: [{\n        featureType: \"poi\",\n        stylers: [{\n          visibility: \"off\"\n        }]\n      }]\n    },\n    children: [/*#__PURE__*/_jsxDEV(Marker, {\n      position: userLocation\n    }, \"userMarker\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), markers.map(marker => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: marker.position,\n        onClick: () => {\n          setSelectedMarker(marker);\n        },\n        icon: \"../../map-marker-icon.png\"\n      }, marker.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this);\n    }), selectedMarker && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: selectedMarker.position,\n        onClick: () => {\n          setSelectedMarker(null);\n        },\n        icon: \"../../map-marker-icon.png\"\n      }, selectedMarker.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedMarker.position,\n        options: {\n          pixelOffset: new window.google.maps.Size(0, -40)\n        },\n        onCloseClick: () => {\n          setSelectedMarker(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-lg font-normal hover:underline cursor-pointer\",\n            onClick: () => {\n              navigate('/storefront', {\n                state: {\n                  businessID: selectedMarker.id\n                }\n              });\n            },\n            children: selectedMarker.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 9\n          }, this), businessOffers[selectedMarker.id].map(offer => {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: offer.title\n            }, offer.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 11\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(EmbeddedMap, \"fvm9/s2x4LqpCkelKWVKDFxsHU4=\", false, function () {\n  return [useJsApiLoader];\n});\n_c = EmbeddedMap;\nexport default _c2 = /*#__PURE__*/memo(EmbeddedMap);\nvar _c, _c2;\n$RefreshReg$(_c, \"EmbeddedMap\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["memo","useEffect","useState","GoogleMap","InfoWindow","Marker","useJsApiLoader","axios","EmbeddedMap","navigate","filters","initialized","setInitialized","userLocation","setUserLocation","businesses","setBusinesses","businessOffers","setBusinessOffers","markers","setMarkers","selectedMarker","setSelectedMarker","isLoaded","id","googleMapsApiKey","length","setMarkerData","filteredBusinesses","forEach","business","includes","category","push","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","setMappableBusinesses","setOffersByBusiness","response","get","catch","error","console","log","status","data","request","message","offers","post","headers","marker","name","latLong","width","height","styles","featureType","stylers","visibility","map","pixelOffset","window","google","maps","Size","state","businessID","offer","title"],"sources":["C:/Users/bogon/CSE498/ally-offers-ecosystem/frontend/src/components/EmbeddedMap.js"],"sourcesContent":["import { memo, useEffect, useState } from 'react';\r\nimport { GoogleMap, InfoWindow, Marker, useJsApiLoader } from '@react-google-maps/api';\r\nimport axios from 'axios';\r\n\r\nconst EmbeddedMap = ({navigate, filters}) => {\r\n\tconst [initialized, setInitialized] = useState(false);\r\n\tconst [userLocation, setUserLocation] = useState(null);\r\n\tconst [businesses, setBusinesses] = useState(null);\r\n\tconst [businessOffers, setBusinessOffers] = useState(null);\r\n\tconst [markers, setMarkers] = useState(null);\r\n\tconst [selectedMarker, setSelectedMarker] = useState(null);\r\n\r\n\tconst { isLoaded } = useJsApiLoader({\r\n\t\tid: 'google-map-script',\r\n\t\tgoogleMapsApiKey: \"AIzaSyCoJ2dosqQree0ARyQ5Isa9XPUt_6CcoRg\",\r\n\t});\r\n\r\n\t// Whenever filters change, update the markers\r\n\tuseEffect(() => {\r\n\t\t// Only run if we have initialized\r\n\t\tif (!initialized) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (filters.length === 0) {\r\n\t\t\t// Show all businesses when no filters are set\r\n\t\t\tsetMarkerData(businesses);\r\n\t\t} else {\r\n\t\t\t// When filters are set, show only filtered businesses\r\n\t\t\tconst filteredBusinesses = [];\r\n\t\t\tbusinesses.forEach(business => {\r\n\t\t\t\tif (filters.includes(business.category)) {\r\n\t\t\t\t\tfilteredBusinesses.push(business);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tsetMarkerData(filteredBusinesses);\r\n\t\t}\r\n\t}, [filters]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Set latitude and longitude of user when this component mounts\r\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\r\n\t\t\tsetUserLocation({ lat: position.coords.latitude, lng: position.coords.longitude });\r\n\t\t});\r\n\r\n\t\t// Get a list of mappable businesses including their name, id, and latLong\r\n\t\tif (!businesses) {\r\n\t\t\tsetMappableBusinesses();\r\n\t\t}\r\n\r\n\t\tif (businesses && !businessOffers) {\r\n\t\t\tsetOffersByBusiness(businesses);\r\n\t\t}\r\n\r\n\t\tif (businesses && !markers) {\r\n\t\t\tsetMarkerData(businesses);\r\n\t\t}\r\n\r\n\t\tif (isLoaded && businesses && markers && businessOffers) {\r\n\t\t\t// Everything is initialized so we are good to display the map\r\n\t\t\tsetInitialized(true);\r\n\t\t}\r\n\t}, [businesses, markers, isLoaded]);\r\n\r\n\t// Set a list of businesses whose coordinates we have\r\n\tconst setMappableBusinesses = async () => {\r\n\t\tconst response = await axios.get(\"http://localhost:8080/CustomerUsers/BusinessLocations\")\r\n\t\t.catch((error) => {\r\n\t\t\tif (error.response) {\r\n\t\t\t\tconsole.log('Server responded with status code:', error.response.status);\r\n\t\t\t\tconsole.log('Response data:', error.response.data);\r\n\t\t\t} else if (error.request) {\r\n\t\t\t\tconsole.log('No response received:', error.request);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Error creating request:', error.message);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetBusinesses(await response.data);\r\n\t};\r\n\r\n\t// Set an object containing all the offers of each business\r\n\tconst setOffersByBusiness = (businesses) => {\r\n\t\tconst offers = {};\r\n\t\tbusinesses.forEach(async (business) => {\r\n\t\t\tconst data = { id: business.id }\r\n\t\t\tconst response = await axios.post(\r\n\t\t\t\t\"http://localhost:8080/BusinessUsers/Analytics\",\r\n\t\t\t\tdata,\r\n\t\t\t\t{ headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }\r\n\t\t\t)\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tif (error.response) {\r\n\t\t\t\t\tconsole.log('Server responded with status code:', error.response.status);\r\n\t\t\t\t\tconsole.log('Response data:', error.response.data);\r\n\t\t\t\t} else if (error.request) {\r\n\t\t\t\t\tconsole.log('No response received:', error.request);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Error creating request:', error.message);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\toffers[business.id] = await response.data;\r\n\t\t});\r\n\r\n\t\tsetBusinessOffers(offers);\r\n\t};\r\n\r\n\t// Set a list of Markers with the names and locations of each business\r\n\tconst setMarkerData = (businesses) => {\r\n\t\tconst markers = [];\r\n\t\tbusinesses.forEach((business) => {\r\n\t\t\tconst marker = {\r\n\t\t\t\tid: business.id,\r\n\t\t\t\tname: business.name,\r\n\t\t\t\tposition: {lat: business.latLong[0], lng: business.latLong[1]},\r\n\t\t\t};\r\n\t\t\tmarkers.push(marker);\r\n\t\t});\r\n\r\n\t\tsetMarkers(markers);\r\n\t};\r\n\r\n\treturn (\r\n\t\tinitialized ? (\r\n\t\t\t<GoogleMap\r\n\t\t\t\tmapContainerStyle={{width: '100%', height: '100%'}}\r\n\t\t\t\tcenter={userLocation}\r\n\t\t\t\tzoom={15}\r\n\t\t\t\tclickableIcons={false}\r\n\t\t\t\toptions={{\r\n\t\t\t\t\tstyles: [{\r\n\t\t\t\t\t\tfeatureType: \"poi\",\r\n\t\t\t\t\t\tstylers: [{ visibility: \"off\" }],\r\n\t\t\t\t\t}]\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Marker\r\n\t\t\t\t\tkey=\"userMarker\"\r\n\t\t\t\t\tposition={userLocation}\r\n\t\t\t\t/>\r\n\t\t\t\t{markers.map((marker) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\tkey={marker.name}\r\n\t\t\t\t\t\t\tposition={marker.position}\r\n\t\t\t\t\t\t\tonClick={() => {setSelectedMarker(marker)}}\r\n\t\t\t\t\t\t\ticon={\"../../map-marker-icon.png\"}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t\t{selectedMarker && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\tkey={selectedMarker.name}\r\n\t\t\t\t\t\t\tposition={selectedMarker.position}\r\n\t\t\t\t\t\t\tonClick={() => {setSelectedMarker(null)}}\r\n\t\t\t\t\t\t\ticon={\"../../map-marker-icon.png\"}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\t\tposition={selectedMarker.position}\r\n\t\t\t\t\t\t\toptions={{pixelOffset: new window.google.maps.Size(0, -40)}}\r\n\t\t\t\t\t\t\tonCloseClick={() => {setSelectedMarker(null)}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h1\r\n\t\t\t\t\t\t\t\t\tclassName='text-lg font-normal hover:underline cursor-pointer'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tnavigate('/storefront', { state: { businessID: selectedMarker.id } });\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t{selectedMarker.name}\r\n\t\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t\t\t{businessOffers[selectedMarker.id].map((offer) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<p key={offer.id}>{offer.title}</p>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</GoogleMap>\r\n\t\t) : <></>\r\n\t);\r\n};\r\n\r\nexport default memo(EmbeddedMap);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}